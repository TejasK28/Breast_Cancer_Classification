# -*- coding: utf-8 -*-
"""Breast_Cancer_Classfication.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QJ2X-bSQGxleezCoprvS-4gAzW3zWIfB

### Import the dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from sklearn.datasets import load_breast_cancer

#take insance of cancer
cancer = load_breast_cancer()

cancer

"""#### Keys in cancer"""

#what colums do we have
cancer.keys()

print(cancer['DESCR'])

print(cancer['target'])

print(cancer['target_names'])

print(cancer['feature_names'])

cancer['data'].shape

"""###Create a DataFrame"""

df_cancer = pd.DataFrame(np.c_[cancer['data'], cancer['target']], columns = np.append(cancer['feature_names'], ['target']))

df_cancer

df_cancer.head()

df_cancer.tail()

sns.pairplot(df_cancer, hue='target', vars= ['mean radius', 'mean texture', 'mean area', 'mean perimeter', 'mean smoothness'])

sns.countplot(df_cancer['target'])

sns.scatterplot(x='mean area', y = 'mean smoothness', hue='target', data = df_cancer)

plt.figure(figsize = (20, 10))
sns.heatmap(df_cancer.corr(), annot = True)

"""### Train"""

X = df_cancer.drop(['target'], axis = 1)
X

y = df_cancer['target']

y

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, test_size = 0.2)

X_train

y_train

X_test

y_test

from sklearn.svm import SVC

from sklearn.metrics import classification_report, confusion_matrix

model = SVC()

model.fit(X_train, y_train)

y_predict = model.predict(X_test)

y_predict

cm = confusion_matrix(y_test, y_predict)

sns.heatmap(cm, annot = True)

"""### Improving the model"""

min_train = X_train.min()

range_train = (X_train-min_train).max()

X_train_scaled = (X_train - min_train)/range_train

X_train_scaled

sns.scatterplot(x=X_train['mean area'], y = X_train['mean smoothness'], hue= y_train)

sns.scatterplot(x=X_train_scaled['mean area'], y = X_train_scaled['mean smoothness'], hue= y_train)

min_test = X_test.min()
range_test = (X_test - min_test).max()
X_test_scaled = (X_test - min_test)/range_test

model.fit(X_train_scaled, y_train)

y_predict = model.predict(X_test_scaled)

cm = confusion_matrix(y_test, y_predict)

sns.heatmap(cm, annot = True)

print(classification_report(y_test, y_predict))

param_grid = {'C' : [0.1,1,10,100], 'gamma' : [1, 0.1, 0.01, 0.001], 'kernel' : ['rbf']}

from sklearn.model_selection import GridSearchCV

grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 4)

grid.fit(X_train_scaled, y_train)

grid.best_params_

g_pred = grid.predict(X_test_scaled)

cm = confusion_matrix(y_test, g_pred)

sns.heatmap(cm, annot = True)

print(classification_report(y_test, g_pred))

